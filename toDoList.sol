
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract toDoList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    struct task {
        string name;
        uint32 taskTime;
        bool flag;
    }
    mapping  (int8 => task) public assoc;
    int8 public key = 0;
    int8[] keys;
    string[] public nameArr;
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }

     modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    function addTask (string name, bool flagTask) public checkOwnerAndAccept{
        uint32 newTaskTime = now;
        keys.push(key);
        key++;
        assoc[key].name = name;
        assoc[key].taskTime = newTaskTime;
        assoc[key].flag = flagTask;
    }
    function getOpenTasks () public checkOwnerAndAccept returns(uint8) {
       uint8 count = 0;
       for (int8 i = 1; i <= key; i++){
           if (!assoc[i].flag) {
               count++;
           }
       }
       return count;
    }
    function getTaskList () public checkOwnerAndAccept returns(mapping  (int8 => task)) {
        return assoc;
    }
    function getTaskDescription(int8 taskNum) public checkOwnerAndAccept returns(string, uint32, bool) {
        require(taskNum > 0 && taskNum <= key);
        return (assoc[taskNum].name,
        assoc[taskNum].taskTime,
        assoc[taskNum].flag);
        
    }
    function deleteTask(int8 taskNum) public checkOwnerAndAccept {
        require(taskNum > 0 && taskNum <= key);
        delete assoc[taskNum];
        key--;
    }
    function taskDone(int8 taskNum) public checkOwnerAndAccept {
        require(taskNum > 0 && taskNum <= key);
        require(!assoc[taskNum].flag);
        assoc[taskNum].flag = true;
    }
}
