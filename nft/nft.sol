
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract nft {
    struct Song {
        string name;
        string band;
        uint rating;
    }

    Song[] songs;
    mapping (uint=>uint) songToOwner;
    mapping (uint=>uint) priceOfSong;


    function addSong(string name, string band, uint rating) public {
        tvm.accept();
        for (uint i = 0; i < songs.length; i++){
            require((name != songs[i].name) && (band != songs[i].band), 102);
        }
        require(rating <= 10, 103 );
        songs.push(Song(name, band, rating));
        uint key = songs.length - 1;
        songToOwner[key] = msg.pubkey();
    }
    function getTokenOwner(uint songId) public view returns (uint){
        return songToOwner[songId];
    }
    function getTokenInfo(uint songId) public view returns (string name, string band, uint rating){
        name = songs[songId].name;
        band = songs[songId].band;
        rating = songs[songId].rating;
    }
    modifier checkSongOwnerAndAccept(uint songId) {
        require(msg.pubkey() == songToOwner[songId], 101);
        tvm.accept();
        _;
    }
    function putForSale(uint songId, uint price) public checkSongOwnerAndAccept(songId) returns(uint) {
        priceOfSong[songId] = price;
        return price;
    }
    function changePrice(uint songId, uint newPrice) public checkSongOwnerAndAccept(songId) {
        priceOfSong[songId] = newPrice;
    }
    function changeRating(uint songId, uint newRating) public checkSongOwnerAndAccept(songId){
        songs[songId].rating = newRating;
    }
    function changeSongOwner(uint songId, uint newOwnerAddress) public checkSongOwnerAndAccept(songId) {
        songToOwner[songId] = newOwnerAddress;
    }
}